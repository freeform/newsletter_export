<?php

/**
 * Implements hook_permission()
 */
function newsletter_export_permission() {
  return array(
    'export newsletter content' => array(
      'title' => t('Export Newsletter Content'), 
      'description' => t('View the Export Newsletter Content menu item on selected content types.'),
    ),
  );
  return array('');
}

/**
 * Implements hook_entity_info_alter().
 */
function newsletter_export_entity_info_alter(&$info) {
  $info['node']['view modes']['newsletter_export'] = array(
      'label' => t('Newsletter'), 
      'custom settings' => TRUE,
  );
}

/**
 * Implements hook_menu
 */
function newsletter_export_menu() {

  $items['admin/config/media/newsletter_export'] = array(
    'title' => 'Newsletter export',
    'description' => 'Change how newsletter export behaves',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('newsletter_export_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['node/%/newsletter_export'] = array(
    'title' => 'Newsletter export',
    'page callback' => 'newsletter_export_node',
    'page arguments' => array(1),
    'access arguments' => array('export newsletter content'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}


// Adds admin settings for module under Admin > Configuration > Media > Newsletter Export
function newsletter_export_admin_settings() {
  // Get an array of node types with internal names as keys and "friendly names" as values,
  // e.g., array('page' => 'Page', 'story' => 'Story')
  $options = node_type_get_names();
  $form['newsletter_export_node_types'] = array( 
    '#type' => 'checkboxes', 
    '#title' => t('Users may export these content types'), 
    '#options' => $options, 
    '#default_value' => variable_get('newsletter_export_node_types', array()), 
    '#description' => t('Nodes of these types will provide links for exporting to html'), 
    '#weight' => 0,
  );
  
  $form['newsletter_export_filename'] = array(
    '#type' => 'textfield',
    '#title' => t('Filename'),
    '#required' => TRUE,
    '#description' => t('Enter the name of html used for export, a date will be appended to the end. If no name is entered a default name of "newsletter_export" will be used'),
    '#default_value' => variable_get('newsletter_export_filename', 'newsletter_export'),
    '#weight' => 1,
  );
  
  $form['newsletter_export_is_download'] = array(
    '#type' => 'radios',
    '#title' => t('Newsletter download on'),
    '#options' => array(0 => t('No'), 1 =>  t('Yes')),
    '#required' => TRUE,
    '#description' => t('Should the newsletter be shown inline or start a download?'),
    '#default_value' => variable_get('newsletter_export_is_download', 1),
    '#weight' => 2,
  );

  return system_settings_form($form); 

}


// Adds newsletter export button to page when newsletter node is viewed and user has appropriate permissions
function newsletter_export_node_view($node, $view_mode, $langcode) {
  $allowed_types = variable_get('newsletter_export_node_types', array());
  //TODO: Should we unset the links if requested in export mode?
  if ( array_key_exists($node->type, $allowed_types) && ($allowed_types[$node->type] !== 0) && 
    $view_mode != 'newsletter_export' && user_access('export newsletter content')) {
    $links['newsletter_export'] = array(
      // Unrelated to the change where links are added, Drupal 7 also adds a
      // format_username() function.
      'title' => t("Newsletter export"),
      'href' => "node/{$node->nid}/newsletter_export",
      'attributes' => array('title' => t("Export/Download this node in newsletter format.")),
    );
    $node->content['links']['newsletter_export'] = array(
      '#theme' => 'links__node__newsletter_export',
      '#links' => $links,
      '#attributes' => array('class' => array('links', 'inline', 'newsletter_link')),
    );
  }
}


// Is this function still being used? It's not referenced anywhere else in the module, 
// and looks like it might have been replaced by lines 167-169 in newsletter_export_node()
function newsletter_export_theme() {
  return array(
    'newsletter_export' => array(
      'variables' => array('raw_markup' => NULL, 'fields' => NULL, 'node' => NULL),
      'template' => 'newsletter-export',
      'pattern' => 'newsletter_export__',
    ),
  );
}


// Changes relative URLs in content to absolute URLs
// Currently only works on strings, and used on $raw_markup, 
// but could be modified to apply to $node and $fields if necessary
function newsletter_export_fix_links($content) {

  $domain = "http://" . $_SERVER['SERVER_NAME'];
  
  $fixed_content = str_replace(
    array('src="/', 'href="/'),
    array('src="' . $domain . '/', 'href="' . $domain . '/'),
    $content
  );

  return $fixed_content;
}


// The final function that generates the actual newsletter output
function newsletter_export_node($item) {
  $node = node_load($item);

  // TODO: Should we add the check for view hook back in for custom node modules?
  // Filter and prepare node in our custom build mode
  $render_array = node_view_multiple(array($item => $node), 'newsletter_export'); //, $weight = 0, $langcode = NULL)

  // TODO: Allow modules to change $node->content before the node is rendered.
  $type = 'node';
  drupal_alter(array('node_view', 'entity_view'), $render_array, $type);

  // TODO: Set the proper node property, then unset unused $node property so that a
  // bad theme can not open a security hole.
    
  // builds $raw_markup string and fixes relative links
  $raw_markup = render($render_array);  
  $raw_markup = newsletter_export_fix_links($raw_markup);

  // builds $fields array
  $field_info = field_info_instances('node', $node->type);
  $fields = array();
  $fields['title'] = $node->title;
  foreach (array_keys($field_info) as $fieldname) {
    $fields[$fieldname] = $node->$fieldname;
  }
  
  // collects $raw_markup, $fields and $node, to pass to the template file
  $output = theme(array('newsletter_export__' . $node->type, 'newsletter_export'), 
      array('raw_markup' => $raw_markup, 'fields' => $fields, 'node' => $node));
      
  // adds the necessary headers to display as separate HTML document if download is checked
  $download = variable_get('newsletter_export_is_download', 1);
  if ($download) {
    drupal_add_http_header("Pragma",  "public");
    drupal_add_http_header("Cache-Control", "max-age=0");
    drupal_add_http_header("Content-Type", "text/html; charset=utf-8");
    drupal_add_http_header("Content-Disposition", 
    'attachment; filename="' . variable_get('newsletter_export_filename', 'newsletter_export') . date('_m-d-Y', time()) . '.html"');
    drupal_add_http_header("Content-Length", strlen($output));
    print $output;
  }
  else {
    return $output;
  }
}
